package ProjectionalQiChat.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractEvent = 0;
  public static final int AbstractUserRule = 1;
  public static final int Comment = 2;
  public static final int CommentRule = 3;
  public static final int Concept = 4;
  public static final int ConceptCollection = 5;
  public static final int ConceptCollectionReference = 6;
  public static final int ConceptContainer = 7;
  public static final int Condition = 8;
  public static final int ConditionConfirmed = 9;
  public static final int CustomEvent = 10;
  public static final int CustomVariable = 11;
  public static final int Description = 12;
  public static final int DialogueEvent = 13;
  public static final int EmptyConcept = 14;
  public static final int EmptyFirstOrderSubrule = 15;
  public static final int EmptyHumanInput = 16;
  public static final int EmptyRobotOutput = 17;
  public static final int EmptyRule = 18;
  public static final int EmptySecondOrderSubrule = 19;
  public static final int EmptyThirdOrderSubrule = 20;
  public static final int FirstOrderSubrule = 21;
  public static final int ForbiddenWord = 22;
  public static final int Function = 23;
  public static final int HeaderSpecification = 24;
  public static final int HumanConcept = 25;
  public static final int HumanConceptCall = 26;
  public static final int HumanConceptReference = 27;
  public static final int HumanInput = 28;
  public static final int IChoiceConfirmed = 29;
  public static final int IExtendedHumanInput = 30;
  public static final int IExtendedRobotOutput = 31;
  public static final int IHumanInputConfirmed = 32;
  public static final int IInputChoiceConfirmed = 33;
  public static final int IInputStoringConfirmed = 34;
  public static final int IOptionalConfirmed = 35;
  public static final int IOutputChoiceConfirmed = 36;
  public static final int IPhraseConfirmed = 37;
  public static final int IRobotOuputConfirmed = 38;
  public static final int IVariableValue = 39;
  public static final int InputChoice = 40;
  public static final int InputStore = 41;
  public static final int InputStoreCall = 42;
  public static final int InputStoreReference = 43;
  public static final int NAOqiEvent = 44;
  public static final int NextProposal = 45;
  public static final int Number = 46;
  public static final int Optional = 47;
  public static final int OutputChoice = 48;
  public static final int Pause = 49;
  public static final int Phrase = 50;
  public static final int PreviousProposal = 51;
  public static final int Proposal = 52;
  public static final int ProposalFunction = 53;
  public static final int RobotConcept = 54;
  public static final int RobotConceptCall = 55;
  public static final int RobotConceptReference = 56;
  public static final int RobotOutput = 57;
  public static final int Rule = 58;
  public static final int SameProposal = 59;
  public static final int SecondOrderSubrule = 60;
  public static final int StoreChoice = 61;
  public static final int StringValue = 62;
  public static final int ThirdOrderSubrule = 63;
  public static final int Topic = 64;
  public static final int TopicReference = 65;
  public static final int UserRule = 66;
  public static final int VariableDeclaration = 67;
  public static final int VariableDeclarationContainer = 68;
  public static final int VariableEvent = 69;
  public static final int VariableReference = 70;
  public static final int VoiceTuningConfig = 71;
  public static final int Wildcard = 72;
  public static final int Word = 73;
  public static final int onStartEvent = 74;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L);
    builder.put(0x6fd223061c49b160L, AbstractEvent);
    builder.put(0x6fd223061c49b101L, AbstractUserRule);
    builder.put(0x1b95532f7913a458L, Comment);
    builder.put(0x6fd223061c49b02fL, CommentRule);
    builder.put(0x6fd223061c49b107L, Concept);
    builder.put(0x6fd223061c49b032L, ConceptCollection);
    builder.put(0x4d41c767d834cf3dL, ConceptCollectionReference);
    builder.put(0x4b2a1ef2bb0ba37fL, ConceptContainer);
    builder.put(0x6fd223061c49b339L, Condition);
    builder.put(0x6fd223061c49b34cL, ConditionConfirmed);
    builder.put(0x6fd223061c49b171L, CustomEvent);
    builder.put(0x264cdb1419126a35L, CustomVariable);
    builder.put(0xf8c3893a78fef99L, Description);
    builder.put(0x6fd223061c49b174L, DialogueEvent);
    builder.put(0x74abec4a7ebea9fbL, EmptyConcept);
    builder.put(0x74abec4a81de9516L, EmptyFirstOrderSubrule);
    builder.put(0x581d6a462c88620aL, EmptyHumanInput);
    builder.put(0x581d6a462c88624bL, EmptyRobotOutput);
    builder.put(0x74abec4a7efbb69bL, EmptyRule);
    builder.put(0x74abec4a81de956eL, EmptySecondOrderSubrule);
    builder.put(0x74abec4a81de9592L, EmptyThirdOrderSubrule);
    builder.put(0x6fd223061c49b103L, FirstOrderSubrule);
    builder.put(0x6fd223061c49b15eL, ForbiddenWord);
    builder.put(0xf8c3893a78b252aL, Function);
    builder.put(0x6fd223061c49b016L, HeaderSpecification);
    builder.put(0x6fd223061c49b106L, HumanConcept);
    builder.put(0x6fd223061c49b15aL, HumanConceptCall);
    builder.put(0x6fd223061c49b159L, HumanConceptReference);
    builder.put(0x6fd223061c49b034L, HumanInput);
    builder.put(0x6fd223061c49b125L, IChoiceConfirmed);
    builder.put(0x6fd223061c49b10bL, IExtendedHumanInput);
    builder.put(0x6fd223061c49b110L, IExtendedRobotOutput);
    builder.put(0x6fd223061c49b109L, IHumanInputConfirmed);
    builder.put(0xf8c3893a78b251aL, IInputChoiceConfirmed);
    builder.put(0x6fd223061c49b15bL, IInputStoringConfirmed);
    builder.put(0x6fd223061c49b123L, IOptionalConfirmed);
    builder.put(0xf8c3893a78b251dL, IOutputChoiceConfirmed);
    builder.put(0x6fd223061c49b126L, IPhraseConfirmed);
    builder.put(0x6fd223061c49b10fL, IRobotOuputConfirmed);
    builder.put(0x6fd223061c49b322L, IVariableValue);
    builder.put(0x6fd223061c49b114L, InputChoice);
    builder.put(0x6fd223061c49b15dL, InputStore);
    builder.put(0x6fd223061c49b31eL, InputStoreCall);
    builder.put(0x6fd223061c49b321L, InputStoreReference);
    builder.put(0x6fd223061c49b173L, NAOqiEvent);
    builder.put(0xf8c3893a78b2535L, NextProposal);
    builder.put(0x6fd223061c49b34fL, Number);
    builder.put(0x6fd223061c49b122L, Optional);
    builder.put(0x6fd223061c49b115L, OutputChoice);
    builder.put(0xf8c3893a78b2555L, Pause);
    builder.put(0x6fd223061c49b121L, Phrase);
    builder.put(0xf8c3893a78b2537L, PreviousProposal);
    builder.put(0x6fd223061c49b030L, Proposal);
    builder.put(0xf8c3893a78b2534L, ProposalFunction);
    builder.put(0x6fd223061c49b108L, RobotConcept);
    builder.put(0x6fd223061c49b31bL, RobotConceptCall);
    builder.put(0x6fd223061c49b31aL, RobotConceptReference);
    builder.put(0x6fd223061c49b033L, RobotOutput);
    builder.put(0x6fd223061c49b013L, Rule);
    builder.put(0xf8c3893a78b2536L, SameProposal);
    builder.put(0x6fd223061c49b104L, SecondOrderSubrule);
    builder.put(0x6fd223061c49b15cL, StoreChoice);
    builder.put(0x6fd223061c49b336L, StringValue);
    builder.put(0x6fd223061c49b105L, ThirdOrderSubrule);
    builder.put(0x6fd223061c487b95L, Topic);
    builder.put(0x6fd223061c49b02eL, TopicReference);
    builder.put(0x6fd223061c49b102L, UserRule);
    builder.put(0x6fd223061c49b326L, VariableDeclaration);
    builder.put(0x2be9a75e6838bf73L, VariableDeclarationContainer);
    builder.put(0x6fd223061c49b172L, VariableEvent);
    builder.put(0x6fd223061c49b170L, VariableReference);
    builder.put(0xf8c3893a78b253bL, VoiceTuningConfig);
    builder.put(0x6fd223061c49b15fL, Wildcard);
    builder.put(0x6fd223061c49b130L, Word);
    builder.put(0x564d00b33bf507b0L, onStartEvent);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
