package ProjectionalQiChat.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.textGen.StringTextGen;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class HeaderSpecification_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("language: ");
    tgs.append(SPropertyOperations.getEnum(ctx.getPrimaryInput(), PROPS.language$hMHZ).getName());
    tgs.newLine();
    if (ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.topics$hNc1)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.topics$hNc1)) {
        tgs.appendNode(item);
      }
      tgs.newLine();
    }
    if (ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.conceptCollections$hNE3)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.conceptCollections$hNE3)) {
        tgs.appendNode(item);
      }
      tgs.newLine();

    }
    if (ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.localConcepts$hTKt)).isNotEmpty()) {
      int spaceCount = "Local Concepts".length();
      String topLine = "# +---" + "-".repeat(spaceCount) + "---+";
      StringTextGen.compilableString(topLine, ctx);
      tgs.newLine();
      tgs.append("# |   Local Concepts   |");
      tgs.newLine();
      StringTextGen.compilableString(topLine, ctx);
      tgs.newLine();
    }
    boolean anyRobotConcepts = ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.localConcepts$hTKt)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.RobotConcept$rd);
      }
    });
    boolean anyHumanConcepts = ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.localConcepts$hTKt)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.HumanConcept$qf);
      }
    });
    if (anyRobotConcepts) {
      tgs.append("# Robot Concepts (Concepts can be used everywhere, where robot output is expected. This concepts have no side effects there.) ");
      tgs.newLine();
      for (SNode item : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.localConcepts$hTKt)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, CONCEPTS.RobotConcept$rd);
        }
      })) {
        tgs.appendNode(item);
      }
    }
    if (anyRobotConcepts || anyHumanConcepts) {
      tgs.newLine();
    }
    if (anyHumanConcepts) {
      tgs.append("# Human Concepts (Concepts can be used everywhere, where human input is expected. This concepts have no side effects there.) ");
      tgs.newLine();
      for (SNode item : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.localConcepts$hTKt)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, CONCEPTS.HumanConcept$qf);
        }
      })) {
        tgs.appendNode(item);
      }
    }
    tgs.newLine();
  }

  private static final class PROPS {
    /*package*/ static final SProperty language$hMHZ = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b75L, "language");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink topics$hNc1 = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b77L, "topics");
    /*package*/ static final SContainmentLink conceptCollections$hNE3 = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b79L, "conceptCollections");
    /*package*/ static final SContainmentLink localConcepts$hTKt = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b7eL, "localConcepts");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RobotConcept$rd = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b108L, "ProjectionalQiChat.structure.RobotConcept");
    /*package*/ static final SConcept HumanConcept$qf = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b106L, "ProjectionalQiChat.structure.HumanConcept");
  }
}
