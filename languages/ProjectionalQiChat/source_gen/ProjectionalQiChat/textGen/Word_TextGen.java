package ProjectionalQiChat.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import ProjectionalQiChat.behavior.VoiceTuningConfig__BehaviorDescriptor;
import ProjectionalQiChat.behavior.Word__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class Word_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    boolean isInRobotOutput = (SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.RobotOutput$SA, false, false) != null);

    if (isInRobotOutput) {
      SNode prevWord = null;
      if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(ctx.getPrimaryInput()), CONCEPTS.Word$iA)) {
        prevWord = SNodeOperations.as(SNodeOperations.getPrevSibling(ctx.getPrimaryInput()), CONCEPTS.Word$iA);
      }
      if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(ctx.getPrimaryInput()), CONCEPTS.Phrase$1a) && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(SNodeOperations.getPrevSibling(ctx.getPrimaryInput()), CONCEPTS.Phrase$1a), LINKS.words$lllC)).last(), CONCEPTS.Word$iA)) {
        prevWord = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(SNodeOperations.getPrevSibling(ctx.getPrimaryInput()), CONCEPTS.Phrase$1a), LINKS.words$lllC)).last(), CONCEPTS.Word$iA);
      }
      if ((SNodeOperations.getPrevSibling(ctx.getPrimaryInput()) == null) || (SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.Phrase$1a, false, false) != null)) {
        if (SNodeOperations.isInstanceOf(SNodeOperations.getPrevSibling(SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.Phrase$1a, false, false)), CONCEPTS.Word$iA)) {
          prevWord = SNodeOperations.as(SNodeOperations.getPrevSibling(SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.Phrase$1a, false, false)), CONCEPTS.Word$iA);
        }
      }

      if ((prevWord != null)) {
        boolean pitchChanged = SPropertyOperations.getInteger(SLinkOperations.getTarget(prevWord, LINKS.voiceTuning$ZxMO), PROPS.pitch$miKV) != SPropertyOperations.getInteger(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.voiceTuning$ZxMO), PROPS.pitch$miKV);
        boolean speakingRateChanged = SPropertyOperations.getInteger(SLinkOperations.getTarget(prevWord, LINKS.voiceTuning$ZxMO), PROPS.speakingRate$mjeX) != SPropertyOperations.getInteger(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.voiceTuning$ZxMO), PROPS.speakingRate$mjeX);
        boolean volumeChanged = SPropertyOperations.getInteger(SLinkOperations.getTarget(prevWord, LINKS.voiceTuning$ZxMO), PROPS.volume$moRl) != SPropertyOperations.getInteger(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.voiceTuning$ZxMO), PROPS.volume$moRl);
        boolean someVoiceTuningsChanged = pitchChanged || speakingRateChanged || volumeChanged;
        boolean currentWordHasDefaultVoiceTuning = !((boolean) VoiceTuningConfig__BehaviorDescriptor.isModified_id2JDDPTDOYiA.invoke(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.voiceTuning$ZxMO)));
        if (someVoiceTuningsChanged && currentWordHasDefaultVoiceTuning) {
          tgs.append("\\rst\\ ");
        } else {
          if (pitchChanged) {
            tgs.append("\\vct=");
            tgs.append(String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.voiceTuning$ZxMO), PROPS.pitch$miKV)));
            tgs.append("\\ ");
          }
          if (speakingRateChanged) {
            tgs.append("\\rspd=");
            tgs.append(String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.voiceTuning$ZxMO), PROPS.speakingRate$mjeX)));
            tgs.append("\\ ");
          }
          if (volumeChanged) {
            tgs.append("\\vol=");
            tgs.append(String.valueOf(SPropertyOperations.getInteger(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.voiceTuning$ZxMO), PROPS.volume$moRl)));
            tgs.append("\\ ");
          }
        }
      }
    }

    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.word$QCkP));
    tgs.append(" ");

    if (isInRobotOutput) {
      SNode nextWord = null;
      if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(ctx.getPrimaryInput()), CONCEPTS.Word$iA)) {
        nextWord = SNodeOperations.as(SNodeOperations.getNextSibling(ctx.getPrimaryInput()), CONCEPTS.Word$iA);
      }
      if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(ctx.getPrimaryInput()), CONCEPTS.Phrase$1a) && SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(SNodeOperations.getNextSibling(ctx.getPrimaryInput()), CONCEPTS.Phrase$1a), LINKS.words$lllC)).last(), CONCEPTS.Word$iA)) {
        nextWord = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(SNodeOperations.getNextSibling(ctx.getPrimaryInput()), CONCEPTS.Phrase$1a), LINKS.words$lllC)).last(), CONCEPTS.Word$iA);
      }
      if ((SNodeOperations.getNextSibling(ctx.getPrimaryInput()) == null) || (SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.Phrase$1a, false, false) != null)) {
        if (SNodeOperations.isInstanceOf(SNodeOperations.getNextSibling(SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.Phrase$1a, false, false)), CONCEPTS.Word$iA)) {
          nextWord = SNodeOperations.as(SNodeOperations.getNextSibling(SNodeOperations.getNodeAncestor(ctx.getPrimaryInput(), CONCEPTS.Phrase$1a, false, false)), CONCEPTS.Word$iA);
        }
      }
      if ((nextWord == null)) {
        if ((boolean) Word__BehaviorDescriptor.isLastWordInRobotOutput_id3jtlk3LLMgD.invoke(ctx.getPrimaryInput())) {
          if ((boolean) VoiceTuningConfig__BehaviorDescriptor.isModified_id2JDDPTDOYiA.invoke(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.voiceTuning$ZxMO))) {
            tgs.append("\\rst\\ ");
          }
        } else {
          tgs.append("\\rst\\ ");
        }
      }

    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RobotOutput$SA = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b033L, "ProjectionalQiChat.structure.RobotOutput");
    /*package*/ static final SConcept Word$iA = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b130L, "ProjectionalQiChat.structure.Word");
    /*package*/ static final SConcept Phrase$1a = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b121L, "ProjectionalQiChat.structure.Phrase");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink words$lllC = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b121L, 0x4d41c767d8337bc3L, "words");
    /*package*/ static final SContainmentLink voiceTuning$ZxMO = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b130L, 0xf8c3893a78b2550L, "voiceTuning");
  }

  private static final class PROPS {
    /*package*/ static final SProperty pitch$miKV = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0xf8c3893a78b253bL, 0xf8c3893a78b253cL, "pitch");
    /*package*/ static final SProperty speakingRate$mjeX = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0xf8c3893a78b253bL, 0xf8c3893a78b253eL, "speakingRate");
    /*package*/ static final SProperty volume$moRl = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0xf8c3893a78b253bL, 0xf8c3893a78b2541L, "volume");
    /*package*/ static final SProperty word$QCkP = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b130L, 0x6fd223061c49b136L, "word");
  }
}
