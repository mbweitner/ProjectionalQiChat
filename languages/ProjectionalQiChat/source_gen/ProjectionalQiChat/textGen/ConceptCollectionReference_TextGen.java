package ProjectionalQiChat.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.textGen.StringTextGen;
import ProjectionalQiChat.behavior.ConceptCollection__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class ConceptCollectionReference_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    int spaceCount = "Concept Collection ".length() + SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.conceptCollection$PnAr), PROPS.name$MnvL).length();
    String topLine = "# +---" + "-".repeat(spaceCount) + "---+";
    StringTextGen.compilableString(topLine, ctx);
    tgs.newLine();
    tgs.append("# |   Concept Collection ");
    tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.conceptCollection$PnAr), PROPS.name$MnvL));
    tgs.append("   |");
    tgs.newLine();
    StringTextGen.compilableString(topLine, ctx);
    tgs.newLine();
    if (!((boolean) ConceptCollection__BehaviorDescriptor.hasEmptyDescription_id1i0VtCTcI4H.invoke(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.conceptCollection$PnAr)))) {
      tgs.appendNode(SLinkOperations.getTarget(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.conceptCollection$PnAr), LINKS.description$Kg0c));
    }
    boolean anyRobotConcepts = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.conceptCollection$PnAr), LINKS.concepts$ACmo)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.RobotConcept$rd);
      }
    });
    boolean anyHumanConcepts = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.conceptCollection$PnAr), LINKS.concepts$ACmo)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, CONCEPTS.HumanConcept$qf);
      }
    });
    if (anyRobotConcepts) {
      tgs.append("# Robot Concepts (Concepts can be used everywhere, where robot output is expected. This concepts have no side effects there.) ");
      tgs.newLine();
      for (SNode item : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.conceptCollection$PnAr), LINKS.concepts$ACmo)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, CONCEPTS.RobotConcept$rd);
        }
      })) {
        tgs.appendNode(item);
      }
    }
    if (anyRobotConcepts && anyHumanConcepts) {
      tgs.newLine();
    }
    if (anyHumanConcepts) {
      tgs.append("# Human Concepts (Concepts can be used everywhere, where human input is expected. This concepts have no side effects there.) ");
      tgs.newLine();
      for (SNode item : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.conceptCollection$PnAr), LINKS.concepts$ACmo)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, CONCEPTS.HumanConcept$qf);
        }
      })) {
        tgs.appendNode(item);
      }
    }
    tgs.newLine();
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink conceptCollection$PnAr = MetaAdapterFactory.getReferenceLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x4d41c767d834cf3dL, 0x4d41c767d834cf3eL, "conceptCollection");
    /*package*/ static final SContainmentLink description$Kg0c = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b032L, 0xf8c3893a78f9d73L, "description");
    /*package*/ static final SContainmentLink concepts$ACmo = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b032L, 0x32fbc13db2d5faaeL, "concepts");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RobotConcept$rd = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b108L, "ProjectionalQiChat.structure.RobotConcept");
    /*package*/ static final SConcept HumanConcept$qf = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b106L, "ProjectionalQiChat.structure.HumanConcept");
  }
}
