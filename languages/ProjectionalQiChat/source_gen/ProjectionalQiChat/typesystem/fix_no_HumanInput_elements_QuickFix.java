package ProjectionalQiChat.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import ProjectionalQiChat.behavior.Word__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class fix_no_HumanInput_elements_QuickFix extends QuickFix_Runtime {
  private static final Logger LOG = LogManager.getLogger(fix_no_HumanInput_elements_QuickFix.class);
  public fix_no_HumanInput_elements_QuickFix() {
    super(new SNodePointer("r:2e52173d-a6ef-4c74-b7ba-dc1accb9a614(ProjectionalQiChat.typesystem)", "7813670980716742398"));
  }
  public void execute(SNode node) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Try to update Human Input! It is Empty: " + ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(node, CONCEPTS.HumanInput$T5), LINKS.inputs$iwW4)).isEmpty());
    }
    SNode input = SNodeOperations.as(node, CONCEPTS.HumanInput$T5);
    SNode newWord = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b130L, "ProjectionalQiChat.structure.Word"));
    Word__BehaviorDescriptor.initializeVoiceTuningStandard_id7iFV4E1v11U.invoke(newWord);
    if (ListSequence.fromList(SLinkOperations.getChildren(input, LINKS.inputs$iwW4)).isEmpty()) {
      ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(node, CONCEPTS.HumanInput$T5), LINKS.inputs$iwW4)).addElement(newWord);
    } else if (SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(input, LINKS.inputs$iwW4)).first()).isAbstract()) {
      SNodeOperations.replaceWithAnother(ListSequence.fromList(SLinkOperations.getChildren(input, LINKS.inputs$iwW4)).first(), newWord);
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept HumanInput$T5 = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b034L, "ProjectionalQiChat.structure.HumanInput");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink inputs$iwW4 = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b034L, 0x4d41c767d8337bb9L, "inputs");
  }
}
