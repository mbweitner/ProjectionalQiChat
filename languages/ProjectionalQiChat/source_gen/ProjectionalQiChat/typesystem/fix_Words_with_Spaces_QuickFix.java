package ProjectionalQiChat.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import ProjectionalQiChat.behavior.Word__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class fix_Words_with_Spaces_QuickFix extends QuickFix_Runtime {
  private static final Logger LOG = LogManager.getLogger(fix_Words_with_Spaces_QuickFix.class);
  public fix_Words_with_Spaces_QuickFix() {
    super(new SNodePointer("r:2e52173d-a6ef-4c74-b7ba-dc1accb9a614(ProjectionalQiChat.typesystem)", "1979562036700584130"));
  }
  public String getDescription(SNode node) {
    return "split word with spaces";
  }
  public void execute(SNode node) {
    if (LOG.isInfoEnabled()) {
      LOG.info("Node im Fix: " + String.valueOf(node));
    }
    String wordString = SPropertyOperations.getString(SNodeOperations.as(node, CONCEPTS.Word$iA), PROPS.word$QCkP);
    if ((wordString != null && wordString.length() > 0)) {
      String[] strings = wordString.split(" ");
      SNode lastWord = null;
      for (int i = 0; i < strings.length; i++) {
        SNode newWord = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b130L, "ProjectionalQiChat.structure.Word"));
        Word__BehaviorDescriptor.initializeVoiceTuningStandard_id7iFV4E1v11U.invoke(newWord);
        SPropertyOperations.assign(newWord, PROPS.word$QCkP, strings[i]);
        if (i == 0) {
          SNodeOperations.replaceWithAnother(node, newWord);
        } else {
          SNodeOperations.insertNextSiblingChild(lastWord, newWord);
        }
        lastWord = newWord;
      }

    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Word$iA = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b130L, "ProjectionalQiChat.structure.Word");
  }

  private static final class PROPS {
    /*package*/ static final SProperty word$QCkP = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b130L, 0x6fd223061c49b136L, "word");
  }
}
