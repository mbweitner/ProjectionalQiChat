package ProjectionalQiChat.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class change_names_ConceptCollection_QuickFix extends QuickFix_Runtime {
  public change_names_ConceptCollection_QuickFix() {
    super(new SNodePointer("r:2e52173d-a6ef-4c74-b7ba-dc1accb9a614(ProjectionalQiChat.typesystem)", "7237576769902494051"));
  }
  public String getDescription(SNode node) {
    return "Rename Concepts";
  }
  public void execute(SNode node) {
    List<SNode> humanConcepts = Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(((SNode) change_names_ConceptCollection_QuickFix.this.getField("conceptCollection")[0]), LINKS.concepts$ACmo), CONCEPTS.HumanConcept$qf)).toListSequence();
    List<SNode> robotConcepts = Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(((SNode) change_names_ConceptCollection_QuickFix.this.getField("conceptCollection")[0]), LINKS.concepts$ACmo), CONCEPTS.RobotConcept$rd)).toListSequence();

    List<String> humanConceptNames = ListSequence.fromList(humanConcepts).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, PROPS.name$MnvL);
      }
    }).toListSequence();
    List<String> newHumanConceptNames = ListSequence.fromList(new ArrayList<String>());
    List<String> robotConceptNames = ListSequence.fromList(robotConcepts).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, PROPS.name$MnvL);
      }
    }).toListSequence();
    List<String> newRobotConceptNames = ListSequence.fromList(new ArrayList<String>());

    for (String conceptName : humanConceptNames) {
      int count = 2;
      String tmpName = conceptName;
      while (ListSequence.fromList(newHumanConceptNames).contains(tmpName)) {
        tmpName = conceptName + "_" + count;
        count++;
      }
      ListSequence.fromList(newHumanConceptNames).addElement(tmpName);
    }

    for (String conceptName : robotConceptNames) {
      int count = 2;
      String tmpName = conceptName;
      while (ListSequence.fromList(newRobotConceptNames).contains(tmpName)) {
        tmpName = conceptName + "_" + count;
        count++;
      }
      ListSequence.fromList(newRobotConceptNames).addElement(tmpName);
    }

    for (int i = 0; i < ListSequence.fromList(humanConcepts).count(); i++) {
      SPropertyOperations.assign(ListSequence.fromList(humanConcepts).getElement(i), PROPS.name$MnvL, ListSequence.fromList(newHumanConceptNames).getElement(i));
    }
    for (int i = 0; i < ListSequence.fromList(robotConcepts).count(); i++) {
      SPropertyOperations.assign(ListSequence.fromList(robotConcepts).getElement(i), PROPS.name$MnvL, ListSequence.fromList(newRobotConceptNames).getElement(i));
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink concepts$ACmo = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b032L, 0x32fbc13db2d5faaeL, "concepts");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept HumanConcept$qf = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b106L, "ProjectionalQiChat.structure.HumanConcept");
    /*package*/ static final SConcept RobotConcept$rd = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b108L, "ProjectionalQiChat.structure.RobotConcept");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
