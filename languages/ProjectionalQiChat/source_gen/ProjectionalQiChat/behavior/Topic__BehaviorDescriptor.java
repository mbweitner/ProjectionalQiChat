package ProjectionalQiChat.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Topic__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c487b95L, "ProjectionalQiChat.structure.Topic");

  public static final SMethod<Iterable<SNode>> getConcepts_id4GE7JaV2Ue_ = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getConcepts").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("4GE7JaV2Ue_").build();
  public static final SMethod<Iterable<SNode>> getVariables_id2JDDPTC5E6Z = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getVariables").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("2JDDPTC5E6Z").build();
  public static final SMethod<Void> cleanTopicImports_id2JDDPTAGdPF = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("cleanTopicImports").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("2JDDPTAGdPF").build();
  public static final SMethod<Void> cleanCCImports_id2JDDPTARrDK = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("cleanCCImports").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).id("2JDDPTARrDK").build();
  /*package*/ static final SMethod<Iterable<SNode>> _flat_sequences_id2JDDPTCdNYd = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("_flat_sequences").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).id("2JDDPTCdNYd").build(SMethodBuilder.createJavaParameter((Class<Iterable<? extends Iterable<SNode>>>) ((Class) Object.class), ""));
  public static final SMethod<Boolean> isContainingNextProposalFunction_id5wtq$oIVZy0 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isContainingNextProposalFunction").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5wtq$oIVZy0").build();
  public static final SMethod<Boolean> hasEmptyDescription_id1i0VtCTcNxV = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasEmptyDescription").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1i0VtCTcNxV").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getConcepts_id4GE7JaV2Ue_, getVariables_id2JDDPTC5E6Z, cleanTopicImports_id2JDDPTAGdPF, cleanCCImports_id2JDDPTARrDK, _flat_sequences_id2JDDPTCdNYd, isContainingNextProposalFunction_id5wtq$oIVZy0, hasEmptyDescription_id1i0VtCTcNxV);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Iterable<SNode> getConcepts_id4GE7JaV2Ue_(@NotNull SNode __thisNode__) {
    List<SNode> localConcepts = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.header$Q5v0), LINKS.localConcepts$hTKt)).toListSequence();
    List<SNode> importedConceptsFromConceptCollections = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> importedConceptFromTopics = ListSequence.fromList(new ArrayList<SNode>());

    Iterable<? extends Iterable<SNode>> tmpCCCollections = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.header$Q5v0), LINKS.conceptCollections$hNE3)).select(new ISelector<SNode, Iterable<SNode>>() {
      public Iterable<SNode> select(SNode it) {
        return (Iterable<SNode>) ConceptContainer__BehaviorDescriptor.getConcepts_id4GE7JaV2Ue_.invoke(SLinkOperations.getTarget(it, LINKS.conceptCollection$PnAr));
      }
    });
    Iterable<? extends Iterable<SNode>> tmpTCollections = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.header$Q5v0), LINKS.topics$hNc1)).select(new ISelector<SNode, Iterable<SNode>>() {
      public Iterable<SNode> select(SNode it) {
        return (Iterable<SNode>) ConceptContainer__BehaviorDescriptor.getConcepts_id4GE7JaV2Ue_.invoke(SLinkOperations.getTarget(it, LINKS.topic$hHYL));
      }
    });

    for (Iterable<SNode> sequence_node_Concept__ : tmpCCCollections) {
      ListSequence.fromList(importedConceptsFromConceptCollections).addSequence(Sequence.fromIterable(sequence_node_Concept__));
    }
    for (Iterable<SNode> sequence_node_Concept__ : tmpTCollections) {
      ListSequence.fromList(importedConceptFromTopics).addSequence(Sequence.fromIterable(sequence_node_Concept__));
    }

    return ListSequence.fromList(localConcepts).concat(ListSequence.fromList(importedConceptsFromConceptCollections)).concat(ListSequence.fromList(importedConceptFromTopics));
  }
  /*package*/ static Iterable<SNode> getVariables_id2JDDPTC5E6Z(@NotNull SNode __thisNode__) {
    Iterable<SNode> localVariables = SNodeOperations.getNodeDescendants(__thisNode__, CONCEPTS.VariableDeclaration$Pa, false, new SAbstractConcept[]{});
    Iterable<? extends Iterable<SNode>> importedVariablesCC = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.header$Q5v0), LINKS.conceptCollections$hNE3)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, LINKS.conceptCollection$PnAr);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    }).select(new ISelector<SNode, Iterable<SNode>>() {
      public Iterable<SNode> select(SNode it) {
        return (Iterable<SNode>) ConceptCollection__BehaviorDescriptor.getVariables_id2JDDPTCcSUJ.invoke(it);
      }
    });
    Iterable<? extends Iterable<SNode>> importedVariablesT = ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.header$Q5v0), LINKS.topics$hNc1)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, LINKS.topic$hHYL);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    }).select(new ISelector<SNode, Iterable<SNode>>() {
      public Iterable<SNode> select(SNode it) {
        return (Iterable<SNode>) Topic__BehaviorDescriptor.getVariables_id2JDDPTC5E6Z.invoke(it);
      }
    });
    return Sequence.fromIterable(localVariables).concat(Sequence.fromIterable(Topic__BehaviorDescriptor._flat_sequences_id2JDDPTCdNYd.invoke(__thisNode__, importedVariablesCC))).concat(Sequence.fromIterable(Topic__BehaviorDescriptor._flat_sequences_id2JDDPTCdNYd.invoke(__thisNode__, importedVariablesT)));
  }
  /*package*/ static void cleanTopicImports_id2JDDPTAGdPF(@NotNull SNode __thisNode__) {
    final Iterable<SNode> currentTopics = SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.header$Q5v0), LINKS.topics$hNc1);
    Sequence.fromIterable(currentTopics).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode it) {
        boolean isFirst = Sequence.fromIterable(currentTopics).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it2) {
            return SPropertyOperations.getString(SLinkOperations.getTarget(it2, LINKS.topic$hHYL), PROPS.name$MnvL) == SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.topic$hHYL), PROPS.name$MnvL);
          }
        }) == it;
        if (!(isFirst)) {
          SNodeOperations.deleteNode(it);
        }
      }
    });
  }
  /*package*/ static void cleanCCImports_id2JDDPTARrDK(@NotNull SNode __thisNode__) {
    final Iterable<SNode> currentCC = SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, LINKS.header$Q5v0), LINKS.conceptCollections$hNE3);
    Sequence.fromIterable(currentCC).visitAll(new IVisitor<SNode>() {
      public void visit(final SNode it) {
        boolean isFirst = Sequence.fromIterable(currentCC).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it2) {
            return SPropertyOperations.getString(SLinkOperations.getTarget(it2, LINKS.conceptCollection$PnAr), PROPS.name$MnvL) == SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.conceptCollection$PnAr), PROPS.name$MnvL);
          }
        }) == it;
        if (!(isFirst)) {
          SNodeOperations.deleteNode(it);
        }
      }
    });
  }
  /*package*/ static Iterable<SNode> _flat_sequences_id2JDDPTCdNYd(@NotNull SNode __thisNode__, Iterable<? extends Iterable<SNode>> toFlatten) {
    List<SNode> flat = new ArrayList<SNode>();
    for (Iterable<SNode> sequence_node_VariableDeclaration__ : toFlatten) {
      for (SNode node_VariableDeclaration_ : sequence_node_VariableDeclaration__) {
        ListSequence.fromList(flat).addElement(node_VariableDeclaration_);
      }
    }
    return flat;
  }
  /*package*/ static boolean isContainingNextProposalFunction_id5wtq$oIVZy0(@NotNull SNode __thisNode__) {
    Iterable<SNode> userRules = SNodeOperations.getNodeDescendants(__thisNode__, CONCEPTS.UserRule$oj, false, new SAbstractConcept[]{});
    for (SNode node_UserRule_ : userRules) {
      if (ListSequence.fromList(SNodeOperations.getNodeDescendants(node_UserRule_, CONCEPTS.NextProposal$AA, false, new SAbstractConcept[]{})).count() > 0) {
        return true;
      }
    }
    return false;
  }
  /*package*/ static boolean hasEmptyDescription_id1i0VtCTcNxV(@NotNull SNode __thisNode__) {
    return (SLinkOperations.getTarget(__thisNode__, LINKS.description$bmMZ) == null) || (boolean) Description__BehaviorDescriptor.isEmptyDescription_id1i0VtCT35fQ.invoke(SLinkOperations.getTarget(__thisNode__, LINKS.description$bmMZ));
  }

  /*package*/ Topic__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Iterable<SNode>) getConcepts_id4GE7JaV2Ue_(node));
      case 1:
        return (T) ((Iterable<SNode>) getVariables_id2JDDPTC5E6Z(node));
      case 2:
        cleanTopicImports_id2JDDPTAGdPF(node);
        return null;
      case 3:
        cleanCCImports_id2JDDPTARrDK(node);
        return null;
      case 4:
        return (T) ((Iterable<SNode>) _flat_sequences_id2JDDPTCdNYd(node, (Iterable<? extends Iterable<SNode>>) parameters[0]));
      case 5:
        return (T) ((Boolean) isContainingNextProposalFunction_id5wtq$oIVZy0(node));
      case 6:
        return (T) ((Boolean) hasEmptyDescription_id1i0VtCTcNxV(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink header$Q5v0 = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c487b95L, 0x4d41c767d8337b6eL, "header");
    /*package*/ static final SContainmentLink localConcepts$hTKt = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b7eL, "localConcepts");
    /*package*/ static final SContainmentLink conceptCollections$hNE3 = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b79L, "conceptCollections");
    /*package*/ static final SReferenceLink conceptCollection$PnAr = MetaAdapterFactory.getReferenceLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x4d41c767d834cf3dL, 0x4d41c767d834cf3eL, "conceptCollection");
    /*package*/ static final SContainmentLink topics$hNc1 = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b77L, "topics");
    /*package*/ static final SReferenceLink topic$hHYL = MetaAdapterFactory.getReferenceLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b02eL, 0x4d41c767d8337b73L, "topic");
    /*package*/ static final SContainmentLink description$bmMZ = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c487b95L, 0x2d6365a451be0df4L, "description");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept VariableDeclaration$Pa = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b326L, "ProjectionalQiChat.structure.VariableDeclaration");
    /*package*/ static final SConcept UserRule$oj = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b102L, "ProjectionalQiChat.structure.UserRule");
    /*package*/ static final SConcept NextProposal$AA = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0xf8c3893a78b2535L, "ProjectionalQiChat.structure.NextProposal");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
