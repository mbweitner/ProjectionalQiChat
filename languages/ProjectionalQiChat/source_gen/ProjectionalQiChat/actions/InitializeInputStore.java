package ProjectionalQiChat.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class InitializeInputStore {
  public static class NodeFactory_2759821551011159298 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      SNode parent = enclosingNode;
      List<SNode> children = SNodeOperations.getChildren(parent);
      int childCount = ListSequence.fromList(children).count();
      int position = 1;

      for (int childNumber = 0; childNumber < childCount; childNumber++) {
        if (childNumber == index) {
          SPropertyOperations.assign(newNode, PROPS.position$nQKo, position);
          SPropertyOperations.assign(newNode, PROPS.optionalName$nW9J, "InputStore" + String.valueOf(position));
          position = position + 1;
        }
        if (SNodeOperations.isInstanceOf(ListSequence.fromList(children).getElement(childNumber), CONCEPTS.InputStore$rg)) {
          SNode currentStore = (SNode) ListSequence.fromList(children).getElement(childNumber);
          SPropertyOperations.assign(currentStore, PROPS.position$nQKo, position);
          if (SPropertyOperations.getString(currentStore, PROPS.optionalName$nW9J).startsWith("InputStore") || SPropertyOperations.getString(currentStore, PROPS.optionalName$nW9J).isEmpty()) {
            SPropertyOperations.assign(currentStore, PROPS.optionalName$nW9J, "InputStore" + String.valueOf(position));
          }
          position = position + 1;
        }
      }

    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty position$nQKo = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b15dL, 0x4d41c767d8337bcdL, "position");
    /*package*/ static final SProperty optionalName$nW9J = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b15dL, 0x4d41c767d8337bcfL, "optionalName");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept InputStore$rg = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b15dL, "ProjectionalQiChat.structure.InputStore");
  }
}
