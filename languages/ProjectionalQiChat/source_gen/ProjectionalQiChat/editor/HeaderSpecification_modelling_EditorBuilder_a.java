package ProjectionalQiChat.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import de.itemis.mps.editor.dropdown.runtime.EditorCell_DropDown;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.menus.transformation.SPropertyInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.SPropertyAccessor;
import jetbrains.mps.nodeEditor.cellMenu.SPropertySubstituteInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.core.behavior.PropertyAttribute__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.openapi.editor.update.AttributeKind;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import ProjectionalQiChat.editor.globalStyles_StyleSheet.notEditableStyleClass;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SEmptyContainmentSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import ProjectionalQiChat.editor.globalStyles_StyleSheet.eventTextStyleClass;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import de.itemis.mps.editor.bool.runtime.CheckboxCellProvider;
import de.itemis.mps.editor.bool.runtime.EditorCell_Checkbox;
import jetbrains.mps.editor.runtime.style.CellAlign;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.jgraph.BaseDiagramECell;
import de.itemis.mps.editor.diagram.runtime.EditorUtil;
import de.itemis.mps.editor.diagram.runtime.jgraph.DiagramCreationContext;
import de.itemis.mps.editor.diagram.runtime.DiagramContext;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramAccessor;
import de.itemis.mps.editor.diagram.runtime.model.AbstractDiagramAccessor;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import de.itemis.mps.editor.diagram.runtime.model.IConnectionType;
import de.itemis.mps.editor.diagram.runtime.model.DiagramModel;
import de.itemis.mps.editor.diagram.runtime.jgraph.ElkLayouter;
import de.itemis.mps.editor.diagram.runtime.model.IPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.CompositePaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.FilteringPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.model.SubstituteInfoPaletteEntryProvider;
import de.itemis.mps.editor.diagram.runtime.substitute.SubstituteInfoFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import de.itemis.mps.editor.diagram.runtime.jgraph.SubDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDiagramECell;
import de.itemis.mps.editor.diagram.runtime.jgraph.RootDCell;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

/*package*/ class HeaderSpecification_modelling_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public HeaderSpecification_modelling_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_1k0m7v_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createCollection_1());
    editorCell.addEditorCell(createConstant_1());
    if (nodeCondition_1k0m7v_a2a()) {
      editorCell.addEditorCell(createCollection_2());
    }
    if (nodeCondition_1k0m7v_a3a()) {
      editorCell.addEditorCell(createCollection_4());
    }
    editorCell.addEditorCell(createCollection_6());
    editorCell.addEditorCell(createDiagram_1());
    editorCell.addEditorCell(createConstant_12());
    return editorCell;
  }
  private boolean nodeCondition_1k0m7v_a2a() {
    return ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.topics$hNc1)).isNotEmpty();
  }
  private boolean nodeCondition_1k0m7v_a3a() {
    return ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.conceptCollections$hNE3)).isNotEmpty();
  }
  private EditorCell createCollection_1() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_1k0m7v_a0");
    editorCell.addEditorCell(createConstant_0());
    editorCell.addEditorCell(createDropDown_1());
    return editorCell;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Language:");
    editorCell.setCellId("Constant_1k0m7v_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createDropDown_0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = new EditorCell_DropDown(editorContext, node, createProperty_0());
    editorCell.setCellId("DropDown_1k0m7v_b0a");
    return editorCell;
  }
  private EditorCell createDropDown_1() {
    return createDropDown_0(getEditorContext(), myNode);
  }
  private EditorCell createProperty_0() {
    getCellFactory().pushCellContext();
    try {
      final SProperty property = PROPS.language$hMHZ;
      getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
      EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new SPropertyAccessor(myNode, property, false, false), myNode);
      editorCell.setDefaultText("<no language>");
      editorCell.setCellId("property_language");
      editorCell.setSubstituteInfo(new SPropertySubstituteInfo(editorCell, property));
      setCellContext(editorCell);
      Iterable<SNode> propertyAttributes = SNodeOperations.ofConcept(new IAttributeDescriptor.AllAttributes().list(myNode), CONCEPTS.PropertyAttribute$Gb);
      Iterable<SNode> currentPropertyAttributes = Sequence.fromIterable(propertyAttributes).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return Objects.equals(PropertyAttribute__BehaviorDescriptor.getProperty_id1avfQ4BBzOo.invoke(it), property);
        }
      });
      if (Sequence.fromIterable(currentPropertyAttributes).isNotEmpty()) {
        EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
        return manager.createNodeRoleAttributeCell(Sequence.fromIterable(currentPropertyAttributes).first(), AttributeKind.PROPERTY, editorCell);
      } else
      return editorCell;
    } finally {
      getCellFactory().popCellContext();
    }
  }
  private EditorCell createConstant_1() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_1k0m7v_b0");
    Style style = new StyleImpl();
    new notEditableStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_2() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_1k0m7v_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_2());
    editorCell.addEditorCell(createCollection_3());
    editorCell.addEditorCell(createConstant_3());
    return editorCell;
  }
  private EditorCell createConstant_2() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Imported Topics:");
    editorCell.setCellId("Constant_1k0m7v_a2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_3() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_1k0m7v_b2a");
    editorCell.addEditorCell(createRefNodeList_0());
    return editorCell;
  }
  private EditorCell createRefNodeList_0() {
    AbstractCellListHandler handler = new topicsListHandler_1k0m7v_a1c0(myNode, getEditorContext());
    EditorCell_Collection editorCell = handler.createCells(new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_topics");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSRole(handler.getElementSRole());
    return editorCell;
  }
  private static class topicsListHandler_1k0m7v_a1c0 extends RefNodeListHandler {
    @NotNull
    private SNode myNode;

    public topicsListHandler_1k0m7v_a1c0(SNode ownerNode, EditorContext context) {
      super(context, false);
      myNode = ownerNode;
    }

    @NotNull
    public SNode getNode() {
      return myNode;
    }
    public SContainmentLink getSLink() {
      return LINKS.topics$hNc1;
    }
    public SAbstractConcept getChildSConcept() {
      return CONCEPTS.TopicReference$Qb;
    }

    public EditorCell createNodeCell(SNode elementNode) {
      EditorCell elementCell = getUpdateSession().updateChildNodeCell(elementNode);
      installElementCellActions(elementNode, elementCell, false);
      return elementCell;
    }
    public EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(topicsListHandler_1k0m7v_a1c0.this.getNode(), LINKS.topics$hNc1));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell();
        installElementCellActions(null, emptyCell, true);
        setCellContext(emptyCell);
        return emptyCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }

    private static final Object OBJ = new Object();

    public void installElementCellActions(SNode elementNode, EditorCell elementCell, boolean isEmptyCell) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET) == null) {
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET, OBJ);
          elementCell.setSubstituteInfo((isEmptyCell ? new SEmptyContainmentSubstituteInfo(elementCell) : new SChildSubstituteInfo(elementCell)));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OBJ);
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
        }
      }
      if (elementCell.getUserObject(ELEMENT_CELL_BACKSPACE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(ELEMENT_CELL_BACKSPACE_SET, OBJ);
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, OBJ);
        }
      }
    }
  }
  private EditorCell createConstant_3() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_1k0m7v_c2a");
    Style style = new StyleImpl();
    new notEditableStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_4() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_1k0m7v_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_4());
    editorCell.addEditorCell(createCollection_5());
    editorCell.addEditorCell(createConstant_5());
    return editorCell;
  }
  private EditorCell createConstant_4() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Imported ConceptCollections:");
    editorCell.setCellId("Constant_1k0m7v_a3a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_5() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_1k0m7v_b3a");
    editorCell.addEditorCell(createRefNodeList_1());
    return editorCell;
  }
  private EditorCell createRefNodeList_1() {
    AbstractCellListHandler handler = new conceptCollectionsListHandler_1k0m7v_a1d0(myNode, getEditorContext());
    EditorCell_Collection editorCell = handler.createCells(new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_conceptCollections");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_INDENT, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSRole(handler.getElementSRole());
    return editorCell;
  }
  private static class conceptCollectionsListHandler_1k0m7v_a1d0 extends RefNodeListHandler {
    @NotNull
    private SNode myNode;

    public conceptCollectionsListHandler_1k0m7v_a1d0(SNode ownerNode, EditorContext context) {
      super(context, false);
      myNode = ownerNode;
    }

    @NotNull
    public SNode getNode() {
      return myNode;
    }
    public SContainmentLink getSLink() {
      return LINKS.conceptCollections$hNE3;
    }
    public SAbstractConcept getChildSConcept() {
      return CONCEPTS.ConceptCollectionReference$Xm;
    }

    public EditorCell createNodeCell(SNode elementNode) {
      EditorCell elementCell = getUpdateSession().updateChildNodeCell(elementNode);
      installElementCellActions(elementNode, elementCell, false);
      return elementCell;
    }
    public EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(conceptCollectionsListHandler_1k0m7v_a1d0.this.getNode(), LINKS.conceptCollections$hNE3));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell();
        installElementCellActions(null, emptyCell, true);
        setCellContext(emptyCell);
        return emptyCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }

    private static final Object OBJ = new Object();

    public void installElementCellActions(SNode elementNode, EditorCell elementCell, boolean isEmptyCell) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET) == null) {
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET, OBJ);
          elementCell.setSubstituteInfo((isEmptyCell ? new SEmptyContainmentSubstituteInfo(elementCell) : new SChildSubstituteInfo(elementCell)));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OBJ);
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
        }
      }
      if (elementCell.getUserObject(ELEMENT_CELL_BACKSPACE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(ELEMENT_CELL_BACKSPACE_SET, OBJ);
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, OBJ);
        }
      }
    }
  }
  private EditorCell createConstant_5() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_1k0m7v_c3a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_6() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_1k0m7v_e0");
    editorCell.addEditorCell(createConstant_6());
    editorCell.addEditorCell(createCollection_7());
    editorCell.addEditorCell(createConstant_8());
    editorCell.addEditorCell(createCollection_8());
    editorCell.addEditorCell(createConstant_10());
    editorCell.addEditorCell(createCollection_9());
    return editorCell;
  }
  private EditorCell createConstant_6() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Local Concept Declarations:");
    editorCell.setCellId("Constant_1k0m7v_a4a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_7() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_1k0m7v_b4a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_7());
    editorCell.addEditorCell(createCheckbox_1());
    return editorCell;
  }
  private EditorCell createConstant_7() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Show Details");
    editorCell.setCellId("Constant_1k0m7v_a1e0");
    Style style = new StyleImpl();
    new eventTextStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCheckbox_0(EditorContext editorContext, SNode node) {
    SProperty property = PROPS.showDetails$iMOJ;
    CellProviderWithRole provider = new CheckboxCellProvider(node, property, editorContext);
    provider.setNoTargetText("<no showDetails>");
    EditorCell_Checkbox editorCell;
    editorCell = ((EditorCell_Checkbox) provider.createEditorCell(editorContext));
    editorCell.setImageTrue("${module}/icons/checkMark.png", 0.2);
    editorCell.setImageFalse("${module}/icons/xMark.png", 0.2);
    editorCell.setCellId("property_showDetails");
    Style style = new StyleImpl();
    style.set(StyleAttributes.HORIZONTAL_ALIGN, CellAlign.CENTER);
    style.set(StyleAttributes.BASE_LINE_CELL, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      return getUpdateSession().updateAttributeCell(provider.getRoleAttributeKind(), editorCell, attributeConcept);
    } else
    return editorCell;
  }
  private EditorCell createCheckbox_1() {
    return createCheckbox_0(getEditorContext(), myNode);
  }
  private EditorCell createConstant_8() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_1k0m7v_c4a");
    Style style = new StyleImpl();
    new notEditableStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    style.set(StyleAttributes.getInstance().<Integer>getAttribute("de.itemis.mps.editor.celllayout.styles", "_margin"), 5);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_8() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_1k0m7v_d4a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_9());
    editorCell.addEditorCell(createCheckbox_3());
    return editorCell;
  }
  private EditorCell createConstant_9() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Hide Human Concepts");
    editorCell.setCellId("Constant_1k0m7v_a3e0");
    Style style = new StyleImpl();
    new eventTextStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCheckbox_2(EditorContext editorContext, SNode node) {
    SProperty property = PROPS.hideHumanConcepts$8R$o;
    CellProviderWithRole provider = new CheckboxCellProvider(node, property, editorContext);
    provider.setNoTargetText("<no hideHumanConcepts>");
    EditorCell_Checkbox editorCell;
    editorCell = ((EditorCell_Checkbox) provider.createEditorCell(editorContext));
    editorCell.setImageTrue("${module}/icons/checkMark.png", 0.2);
    editorCell.setImageFalse("${module}/icons/xMark.png", 0.2);
    editorCell.setCellId("property_hideHumanConcepts");
    Style style = new StyleImpl();
    style.set(StyleAttributes.HORIZONTAL_ALIGN, CellAlign.CENTER);
    style.set(StyleAttributes.BASE_LINE_CELL, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      return getUpdateSession().updateAttributeCell(provider.getRoleAttributeKind(), editorCell, attributeConcept);
    } else
    return editorCell;
  }
  private EditorCell createCheckbox_3() {
    return createCheckbox_2(getEditorContext(), myNode);
  }
  private EditorCell createConstant_10() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_1k0m7v_e4a");
    Style style = new StyleImpl();
    new notEditableStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    style.set(StyleAttributes.getInstance().<Integer>getAttribute("de.itemis.mps.editor.celllayout.styles", "_margin"), 5);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_9() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_1k0m7v_f4a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createConstant_11());
    editorCell.addEditorCell(createCheckbox_5());
    return editorCell;
  }
  private EditorCell createConstant_11() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Hide Robot Concepts");
    editorCell.setCellId("Constant_1k0m7v_a5e0");
    Style style = new StyleImpl();
    new eventTextStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCheckbox_4(EditorContext editorContext, SNode node) {
    SProperty property = PROPS.hideRobotConcepts$9cUN;
    CellProviderWithRole provider = new CheckboxCellProvider(node, property, editorContext);
    provider.setNoTargetText("<no hideRobotConcepts>");
    EditorCell_Checkbox editorCell;
    editorCell = ((EditorCell_Checkbox) provider.createEditorCell(editorContext));
    editorCell.setImageTrue("${module}/icons/checkMark.png", 0.2);
    editorCell.setImageFalse("${module}/icons/xMark.png", 0.2);
    editorCell.setCellId("property_hideRobotConcepts");
    Style style = new StyleImpl();
    style.set(StyleAttributes.HORIZONTAL_ALIGN, CellAlign.CENTER);
    style.set(StyleAttributes.BASE_LINE_CELL, true);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      return getUpdateSession().updateAttributeCell(provider.getRoleAttributeKind(), editorCell, attributeConcept);
    } else
    return editorCell;
  }
  private EditorCell createCheckbox_5() {
    return createCheckbox_4(getEditorContext(), myNode);
  }
  private EditorCell createDiagram_0(final EditorContext editorContext, final SNode node) {
    final Wrappers._T<BaseDiagramECell> editorCell = new Wrappers._T<BaseDiagramECell>(null);

    EditorUtil.noCaching(editorContext, () -> {
      DiagramCreationContext.createDiagram(() -> {
        DiagramContext.withContext(node, () -> editorCell.value, () -> {
          ContextVariables.withValue("thisNode", node, () -> {
            final ContextVariables _variablesContext = ContextVariables.getCurrent();
            IDiagramAccessor accessor = new AbstractDiagramAccessor(node) {
              public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
                final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
                for (SNode e : Sequence.fromIterable(new Object() {
                  public Iterable<SNode> query() {
                    Iterable<SNode> nodes = ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.localConcepts$hTKt)).where(new IWhereFilter<SNode>() {
                      public boolean accept(SNode it) {
                        return !(SNodeOperations.isInstanceOf(it, CONCEPTS.EmptyConcept$zW));
                      }
                    });
                    if (SPropertyOperations.getBoolean(node, PROPS.hideHumanConcepts$8R$o)) {
                      nodes = Sequence.fromIterable(nodes).where(new IWhereFilter<SNode>() {
                        public boolean accept(SNode it) {
                          return !(SNodeOperations.isInstanceOf(it, CONCEPTS.HumanConcept$qf));
                        }
                      });
                    }
                    if (SPropertyOperations.getBoolean(node, PROPS.hideRobotConcepts$9cUN)) {
                      nodes = Sequence.fromIterable(nodes).where(new IWhereFilter<SNode>() {
                        public boolean accept(SNode it) {
                          return !(SNodeOperations.isInstanceOf(it, CONCEPTS.RobotConcept$rd));
                        }
                      });
                    }
                    return nodes;
                  }
                }.query())) {
                  elements.addAll(accessorFactory.fromSNode(e, false));
                }
                return elements;
              }
              @Override
              public List<IConnectionType> getConnectionTypes() {
                List<IConnectionType> connectionTypes = new ArrayList<IConnectionType>();
                return connectionTypes;
              }

            };

            DiagramModel model = DiagramModel.getModel(editorContext, node, "4919285543699311324", accessor);

            ElkLayouter layouter;

            IPaletteEntryProvider paletteEntryProvider = new CompositePaletteEntryProvider(new FilteringPaletteEntryProvider(new SubstituteInfoPaletteEntryProvider(new SubstituteInfoFactory(editorContext, node).forChildLink(node, SLinkOperations.findLinkDeclaration(LINKS.localConcepts$hTKt)))) {
              @Override
              protected boolean remove(SAbstractConcept concept, SNode targetNode) {
                return SConceptOperations.isExactly(SNodeOperations.asSConcept(concept), CONCEPTS.EmptyConcept$zW);
              }
            });
            model.setPaletteEntryProvider(paletteEntryProvider);

            if (DiagramCreationContext.isSubdiagram()) {
              editorCell.value = new SubDiagramECell(editorContext, node, model);
            } else {
              editorCell.value = new RootDiagramECell(editorContext, node, model);
            }
            editorCell.value.setCellId("Diagram_1k0m7v_f0");
            if (editorCell.value.getContextGraph() != null) {
              Object defaultParent = editorCell.value.getContextGraph().getDefaultParent();
              if (defaultParent instanceof RootDCell) {
                {
                  Style styleDiagram = new StyleImpl();
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__layout-diagram-button"), true);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__relayout-all-edges-button"), false);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__maximize-diagram-button"), true);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__reset-view-button"), true);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__zoom-in-button"), true);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__zoom-out-button"), true);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__fit-size-all-diagram-button"), true);
                  styleDiagram.set(StyleAttributes.getInstance().<Boolean>getAttribute("de.itemis.mps.editor.diagram.styles", "__show_ports_labels"), false);
                  ((RootDCell) defaultParent).updateButtonConfig(styleDiagram);
                }
              }
            }
          });
        });
      });
    });

    return editorCell.value;
  }
  private EditorCell createDiagram_1() {
    return createDiagram_0(getEditorContext(), myNode);
  }
  private EditorCell createConstant_12() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "");
    editorCell.setCellId("Constant_1k0m7v_g0");
    Style style = new StyleImpl();
    new notEditableStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink topics$hNc1 = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b77L, "topics");
    /*package*/ static final SContainmentLink conceptCollections$hNE3 = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b79L, "conceptCollections");
    /*package*/ static final SContainmentLink localConcepts$hTKt = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b7eL, "localConcepts");
  }

  private static final class PROPS {
    /*package*/ static final SProperty language$hMHZ = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x4d41c767d8337b75L, "language");
    /*package*/ static final SProperty showDetails$iMOJ = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x2e668f99ab96bdcfL, "showDetails");
    /*package*/ static final SProperty hideHumanConcepts$8R$o = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x2e668f99ab970c22L, "hideHumanConcepts");
    /*package*/ static final SProperty hideRobotConcepts$9cUN = MetaAdapterFactory.getProperty(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b016L, 0x2e668f99ab970c3eL, "hideRobotConcepts");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept PropertyAttribute$Gb = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute");
    /*package*/ static final SConcept TopicReference$Qb = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b02eL, "ProjectionalQiChat.structure.TopicReference");
    /*package*/ static final SConcept ConceptCollectionReference$Xm = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x4d41c767d834cf3dL, "ProjectionalQiChat.structure.ConceptCollectionReference");
    /*package*/ static final SConcept EmptyConcept$zW = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x74abec4a7ebea9fbL, "ProjectionalQiChat.structure.EmptyConcept");
    /*package*/ static final SConcept HumanConcept$qf = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b106L, "ProjectionalQiChat.structure.HumanConcept");
    /*package*/ static final SConcept RobotConcept$rd = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b108L, "ProjectionalQiChat.structure.RobotConcept");
  }
}
