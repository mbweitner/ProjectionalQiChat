package ProjectionalQiChat.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import ProjectionalQiChat.editor.globalStyles_StyleSheet.notEditableStyleClass;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.editor.runtime.style.CellAlign;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import java.awt.Color;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.EditorSettings;
import javax.swing.JPanel;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.BasicStroke;
import java.awt.RenderingHints;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SEmptyContainmentSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_CreateChildRangeSelection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.nodeEditor.selection.NodeRangeSelection;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

/*package*/ class InputChoice_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public InputChoice_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_jkr9kg_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.setFoldable(true);
    editorCell.setFoldedCell(createCollection_2());
    editorCell.addEditorCell(createConstant_0());
    editorCell.addEditorCell(createCollection_1());
    return editorCell;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "Choice");
    editorCell.setCellId("Constant_jkr9kg_a0");
    Style style = new StyleImpl();
    new notEditableStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    style.set(StyleAttributes.HORIZONTAL_ALIGN, CellAlign.CENTER);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_1() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_jkr9kg_b0");
    editorCell.addEditorCell(createJComponent_0());
    editorCell.addEditorCell(createRefNodeList_0());
    editorCell.addEditorCell(createJComponent_1());
    return editorCell;
  }
  private EditorCell createJComponent_0() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_jkr9kg_a0b0(), "JComponent_jkr9kg_a1a");
    editorCell.setCellId("JComponent_jkr9kg_a1a_0");
    return editorCell;
  }
  private JComponent _QueryFunction_JComponent_jkr9kg_a0b0() {
    final Color bracketColor = Color.white;
    final int choiceElementCount = ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.choices$YXnx)).count();
    final int fontSize = EditorSettings.getInstance().getFontSize();
    final int bracketHeight = (int) Math.round(choiceElementCount * fontSize * 1.5);
    final int bracketWidth = (((choiceElementCount + 5) <= 20) ? choiceElementCount + 5 : 20);
    JPanel panel = new JPanel() {

      @Override
      public Dimension getPreferredSize() {
        return new Dimension(bracketWidth + 2, bracketHeight + 2);
      }
      @Override
      protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        int height = bracketHeight;
        int width = bracketWidth;
        g.setColor(bracketColor);
        ((Graphics2D) g).setStroke(new BasicStroke(3));
        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.drawLine(0, 0, 0, height);
        g.drawLine(0, height, width, height);
        g.drawLine(0, 0, width, 0);
      }
    };
    panel.setBackground(new Color(1, 0, 0, 0));
    return panel;
  }
  private EditorCell createRefNodeList_0() {
    AbstractCellListHandler handler = new choicesListHandler_jkr9kg_b1a(myNode, getEditorContext());
    EditorCell_Collection editorCell = handler.createCells(new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_choices");
    editorCell.setGridLayout(true);
    editorCell.setSRole(handler.getElementSRole());
    return editorCell;
  }
  private static class choicesListHandler_jkr9kg_b1a extends RefNodeListHandler {
    @NotNull
    private SNode myNode;

    public choicesListHandler_jkr9kg_b1a(SNode ownerNode, EditorContext context) {
      super(context, false);
      myNode = ownerNode;
    }

    @NotNull
    public SNode getNode() {
      return myNode;
    }
    public SContainmentLink getSLink() {
      return LINKS.choices$YXnx;
    }
    public SAbstractConcept getChildSConcept() {
      return CONCEPTS.IInputChoiceConfirmed$5b;
    }

    public EditorCell createNodeCell(SNode elementNode) {
      EditorCell elementCell = getUpdateSession().updateChildNodeCell(elementNode);
      installElementCellActions(elementNode, elementCell, false);
      return elementCell;
    }
    public EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(choicesListHandler_jkr9kg_b1a.this.getNode(), LINKS.choices$YXnx));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell();
        installElementCellActions(null, emptyCell, true);
        setCellContext(emptyCell);
        return emptyCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }

    private static final Object OBJ = new Object();

    public void installElementCellActions(SNode elementNode, EditorCell elementCell, boolean isEmptyCell) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET) == null) {
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET, OBJ);
          elementCell.setSubstituteInfo((isEmptyCell ? new SEmptyContainmentSubstituteInfo(elementCell) : new SChildSubstituteInfo(elementCell)));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OBJ);
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
        }
      }
      if (elementCell.getUserObject(ELEMENT_CELL_BACKSPACE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(ELEMENT_CELL_BACKSPACE_SET, OBJ);
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, OBJ);
        }
      }
    }
  }
  private EditorCell createRefNodeList_1() {
    AbstractCellListHandler handler = new choicesListHandler_jkr9kg_a1b0(myNode, getEditorContext());
    EditorCell_Collection editorCell = handler.createCells(new CellLayout_Horizontal(), false);
    editorCell.setCellId("refNodeList_choices1");
    editorCell.setSRole(handler.getElementSRole());
    return editorCell;
  }
  private static class choicesListHandler_jkr9kg_a1b0 extends RefNodeListHandler {
    @NotNull
    private SNode myNode;

    public choicesListHandler_jkr9kg_a1b0(SNode ownerNode, EditorContext context) {
      super(context, false);
      myNode = ownerNode;
    }

    @NotNull
    public SNode getNode() {
      return myNode;
    }
    public SContainmentLink getSLink() {
      return LINKS.choices$YXnx;
    }
    public SAbstractConcept getChildSConcept() {
      return CONCEPTS.IInputChoiceConfirmed$5b;
    }

    public EditorCell createNodeCell(SNode elementNode) {
      EditorCell elementCell = getUpdateSession().updateChildNodeCell(elementNode);
      installElementCellActions(elementNode, elementCell, false);
      elementCell.setAction(CellActionType.SELECT_NEXT, new CellAction_CreateChildRangeSelection(elementNode, new RangeSelectionFilter_jkr9kg_a1b0(getEditorContext()), "empty_choices", getEditorContext(), true));
      elementCell.setAction(CellActionType.SELECT_PREVIOUS, new CellAction_CreateChildRangeSelection(elementNode, new RangeSelectionFilter_jkr9kg_a1b0(getEditorContext()), "empty_choices", getEditorContext(), false));
      return elementCell;
    }
    public EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(choicesListHandler_jkr9kg_a1b0.this.getNode(), LINKS.choices$YXnx));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell();
        installElementCellActions(null, emptyCell, true);
        setCellContext(emptyCell);
        return emptyCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }

    private static final Object OBJ = new Object();

    public void installElementCellActions(SNode elementNode, EditorCell elementCell, boolean isEmptyCell) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET) == null) {
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET, OBJ);
          elementCell.setSubstituteInfo((isEmptyCell ? new SEmptyContainmentSubstituteInfo(elementCell) : new SChildSubstituteInfo(elementCell)));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OBJ);
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
        }
      }
      if (elementCell.getUserObject(ELEMENT_CELL_BACKSPACE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(ELEMENT_CELL_BACKSPACE_SET, OBJ);
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, OBJ);
        }
      }
    }
    public boolean filter(SNode childNode) {
      return childNode == ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(childNode))).getElement(0);
    }
  }
  public static class RangeSelectionFilter_jkr9kg_a1b0 extends NodeRangeSelection.RangeSelectionFilter {


    public RangeSelectionFilter_jkr9kg_a1b0(EditorContext editorContext) {
      super(editorContext);
    }
    public boolean accept(SNode childNode) {
      return childNode == ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(childNode))).getElement(0);
    }
    public String getModuleReference() {
      return "9f283760-f9ca-4f5b-8990-d42851344ce7(ProjectionalQiChat)";
    }
  }
  private EditorCell createJComponent_1() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_jkr9kg_a2b0(), "JComponent_jkr9kg_c1a");
    editorCell.setCellId("JComponent_jkr9kg_c1a_0");
    return editorCell;
  }
  private JComponent _QueryFunction_JComponent_jkr9kg_a2b0() {
    final int choiceElementCount = ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.choices$YXnx)).count();
    final int fontSize = EditorSettings.getInstance().getFontSize();
    final int bracketHeight = (int) Math.round(choiceElementCount * fontSize * 1.5);
    final int bracketWidth = (((choiceElementCount + 5) <= 20) ? choiceElementCount + 5 : 20);
    JPanel panel = new JPanel() {

      @Override
      public Dimension getPreferredSize() {
        return new Dimension(bracketWidth + 2, bracketHeight + 2);
      }
      @Override
      protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        int height = bracketHeight;
        int width = bracketWidth;
        g.setColor(Color.white);
        ((Graphics2D) g).setStroke(new BasicStroke(3));
        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.drawLine(width, 0, width, height);
        g.drawLine(0, height, width, height);
        g.drawLine(0, 0, width, 0);
      }
    };
    panel.setBackground(new Color(1, 0, 0, 0));
    return panel;
  }
  private EditorCell createCollection_2() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_jkr9kg_a0");
    editorCell.addEditorCell(createJComponent_2());
    editorCell.addEditorCell(createCollection_3());
    editorCell.addEditorCell(createJComponent_3());
    return editorCell;
  }
  private EditorCell createJComponent_2() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_jkr9kg_a0a0(), "JComponent_jkr9kg_a0a");
    editorCell.setCellId("JComponent_jkr9kg_a0a_0");
    return editorCell;
  }
  private JComponent _QueryFunction_JComponent_jkr9kg_a0a0() {
    final int choiceElementCount = 1;
    final int fontSize = EditorSettings.getInstance().getFontSize();
    final int bracketHeight = (int) Math.round(choiceElementCount * fontSize * 1.5);
    final int bracketWidth = choiceElementCount + 5;
    JPanel panel = new JPanel() {

      @Override
      public Dimension getPreferredSize() {
        return new Dimension(bracketWidth + 2, bracketHeight + 2);
      }
      @Override
      protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        int height = bracketHeight;
        int width = bracketWidth;
        g.setColor(Color.white);
        ((Graphics2D) g).setStroke(new BasicStroke(3));
        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.drawLine(0, 0, 0, height);
        g.drawLine(0, height, width, height);
        g.drawLine(0, 0, width, 0);
      }
    };
    panel.setBackground(new Color(1, 0, 0, 0));
    return panel;
  }
  private EditorCell createCollection_3() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_jkr9kg_b0a");
    editorCell.addEditorCell(createRefNodeList_2());
    editorCell.addEditorCell(createConstant_1());
    return editorCell;
  }
  private EditorCell createRefNodeList_2() {
    AbstractCellListHandler handler = new choicesListHandler_jkr9kg_a1a0(myNode, getEditorContext());
    EditorCell_Collection editorCell = handler.createCells(new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_choices2");
    editorCell.setGridLayout(true);
    editorCell.setSRole(handler.getElementSRole());
    return editorCell;
  }
  private static class choicesListHandler_jkr9kg_a1a0 extends RefNodeListHandler {
    @NotNull
    private SNode myNode;

    public choicesListHandler_jkr9kg_a1a0(SNode ownerNode, EditorContext context) {
      super(context, false);
      myNode = ownerNode;
    }

    @NotNull
    public SNode getNode() {
      return myNode;
    }
    public SContainmentLink getSLink() {
      return LINKS.choices$YXnx;
    }
    public SAbstractConcept getChildSConcept() {
      return CONCEPTS.IInputChoiceConfirmed$5b;
    }

    public EditorCell createNodeCell(SNode elementNode) {
      EditorCell elementCell = getUpdateSession().updateChildNodeCell(elementNode);
      installElementCellActions(elementNode, elementCell, false);
      elementCell.setAction(CellActionType.SELECT_NEXT, new CellAction_CreateChildRangeSelection(elementNode, new RangeSelectionFilter_jkr9kg_a1a0(getEditorContext()), "empty_choices", getEditorContext(), true));
      elementCell.setAction(CellActionType.SELECT_PREVIOUS, new CellAction_CreateChildRangeSelection(elementNode, new RangeSelectionFilter_jkr9kg_a1a0(getEditorContext()), "empty_choices", getEditorContext(), false));
      return elementCell;
    }
    public EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(choicesListHandler_jkr9kg_a1a0.this.getNode(), LINKS.choices$YXnx));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell();
        installElementCellActions(null, emptyCell, true);
        setCellContext(emptyCell);
        return emptyCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }

    private static final Object OBJ = new Object();

    public void installElementCellActions(SNode elementNode, EditorCell elementCell, boolean isEmptyCell) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET) == null) {
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET, OBJ);
          elementCell.setSubstituteInfo((isEmptyCell ? new SEmptyContainmentSubstituteInfo(elementCell) : new SChildSubstituteInfo(elementCell)));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OBJ);
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
        }
      }
      if (elementCell.getUserObject(ELEMENT_CELL_BACKSPACE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(ELEMENT_CELL_BACKSPACE_SET, OBJ);
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, OBJ);
        }
      }
    }
    public boolean filter(SNode childNode) {
      return childNode == ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(childNode))).getElement(0);
    }
  }
  public static class RangeSelectionFilter_jkr9kg_a1a0 extends NodeRangeSelection.RangeSelectionFilter {


    public RangeSelectionFilter_jkr9kg_a1a0(EditorContext editorContext) {
      super(editorContext);
    }
    public boolean accept(SNode childNode) {
      return childNode == ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(childNode))).getElement(0);
    }
    public String getModuleReference() {
      return "9f283760-f9ca-4f5b-8990-d42851344ce7(ProjectionalQiChat)";
    }
  }
  private EditorCell createRefNodeList_3() {
    AbstractCellListHandler handler = new choicesListHandler_jkr9kg_a0b0a(myNode, getEditorContext());
    EditorCell_Collection editorCell = handler.createCells(new CellLayout_Horizontal(), false);
    editorCell.setCellId("refNodeList_choices3");
    editorCell.setSRole(handler.getElementSRole());
    return editorCell;
  }
  private static class choicesListHandler_jkr9kg_a0b0a extends RefNodeListHandler {
    @NotNull
    private SNode myNode;

    public choicesListHandler_jkr9kg_a0b0a(SNode ownerNode, EditorContext context) {
      super(context, false);
      myNode = ownerNode;
    }

    @NotNull
    public SNode getNode() {
      return myNode;
    }
    public SContainmentLink getSLink() {
      return LINKS.choices$YXnx;
    }
    public SAbstractConcept getChildSConcept() {
      return CONCEPTS.IInputChoiceConfirmed$5b;
    }

    public EditorCell createNodeCell(SNode elementNode) {
      EditorCell elementCell = getUpdateSession().updateChildNodeCell(elementNode);
      installElementCellActions(elementNode, elementCell, false);
      elementCell.setAction(CellActionType.SELECT_NEXT, new CellAction_CreateChildRangeSelection(elementNode, new RangeSelectionFilter_jkr9kg_a0b0a(getEditorContext()), "empty_choices", getEditorContext(), true));
      elementCell.setAction(CellActionType.SELECT_PREVIOUS, new CellAction_CreateChildRangeSelection(elementNode, new RangeSelectionFilter_jkr9kg_a0b0a(getEditorContext()), "empty_choices", getEditorContext(), false));
      return elementCell;
    }
    public EditorCell createEmptyCell() {
      getCellFactory().pushCellContext();
      getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(choicesListHandler_jkr9kg_a0b0a.this.getNode(), LINKS.choices$YXnx));
      try {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell();
        installElementCellActions(null, emptyCell, true);
        setCellContext(emptyCell);
        return emptyCell;
      } finally {
        getCellFactory().popCellContext();
      }
    }

    private static final Object OBJ = new Object();

    public void installElementCellActions(SNode elementNode, EditorCell elementCell, boolean isEmptyCell) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET) == null) {
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_COMPLETE_SET, OBJ);
          elementCell.setSubstituteInfo((isEmptyCell ? new SEmptyContainmentSubstituteInfo(elementCell) : new SChildSubstituteInfo(elementCell)));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OBJ);
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
        }
      }
      if (elementCell.getUserObject(ELEMENT_CELL_BACKSPACE_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(ELEMENT_CELL_BACKSPACE_SET, OBJ);
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
      }
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        if (elementNode != null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, OBJ);
        }
      }
    }
    public boolean filter(SNode childNode) {
      return childNode == ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(childNode))).getElement(0);
    }
  }
  public static class RangeSelectionFilter_jkr9kg_a0b0a extends NodeRangeSelection.RangeSelectionFilter {


    public RangeSelectionFilter_jkr9kg_a0b0a(EditorContext editorContext) {
      super(editorContext);
    }
    public boolean accept(SNode childNode) {
      return childNode == ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(childNode))).getElement(0);
    }
    public String getModuleReference() {
      return "9f283760-f9ca-4f5b-8990-d42851344ce7(ProjectionalQiChat)";
    }
  }
  private EditorCell createConstant_1() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "...");
    editorCell.setCellId("Constant_jkr9kg_b1a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createJComponent_3() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_jkr9kg_a2a0(), "JComponent_jkr9kg_c0a");
    editorCell.setCellId("JComponent_jkr9kg_c0a_0");
    return editorCell;
  }
  private JComponent _QueryFunction_JComponent_jkr9kg_a2a0() {
    final int choiceElementCount = 1;
    final int fontSize = EditorSettings.getInstance().getFontSize();
    final int bracketHeight = (int) Math.round(choiceElementCount * fontSize * 1.5);
    final int bracketWidth = choiceElementCount + 5;
    JPanel panel = new JPanel() {

      @Override
      public Dimension getPreferredSize() {
        return new Dimension(bracketWidth + 2, bracketHeight + 2);
      }
      @Override
      protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        int height = bracketHeight;
        int width = bracketWidth;
        g.setColor(Color.white);
        ((Graphics2D) g).setStroke(new BasicStroke(3));
        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.drawLine(width, 0, width, height);
        g.drawLine(0, height, width, height);
        g.drawLine(0, 0, width, 0);
      }
    };
    panel.setBackground(new Color(1, 0, 0, 0));
    return panel;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink choices$YXnx = MetaAdapterFactory.getContainmentLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b114L, 0xf8c3893a78b2520L, "choices");
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IInputChoiceConfirmed$5b = MetaAdapterFactory.getInterfaceConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0xf8c3893a78b251aL, "ProjectionalQiChat.structure.IInputChoiceConfirmed");
  }
}
