package ProjectionalQiChat.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import ProjectionalQiChat.behavior.ConceptContainer__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.scope.ListScope;
import java.util.Collections;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class RobotConceptReference_Constraints extends BaseConstraintsDescriptor {
  public RobotConceptReference_Constraints() {
    super(CONCEPTS.RobotConceptReference$r0);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.concept$oC45, this, true, false) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:0732640b-7693-4dcb-8a72-67b764f4b543(ProjectionalQiChat.constraints)", "6883323784105055787");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            SNode ancestor = SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.ConceptContainer$NA, false, false);
            if ((ancestor != null)) {
              Iterable<SNode> allConcepts = ConceptContainer__BehaviorDescriptor.getConcepts_id4GE7JaV2Ue_.invoke(ancestor);
              final SNode currentConcept = SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.RobotConcept$rd, false, false);
              if ((currentConcept != null)) {
                allConcepts = Sequence.fromIterable(allConcepts).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getString(it, PROPS.name$MnvL) != SPropertyOperations.getString(currentConcept, PROPS.name$MnvL);
                  }
                });
              }
              return ListScope.forNamedElements(allConcepts);
            } else {
              return ListScope.forNamedElements(Sequence.fromIterable(Collections.emptyList()));
            }
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RobotConceptReference$r0 = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b31aL, "ProjectionalQiChat.structure.RobotConceptReference");
    /*package*/ static final SInterfaceConcept ConceptContainer$NA = MetaAdapterFactory.getInterfaceConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x4b2a1ef2bb0ba37fL, "ProjectionalQiChat.structure.ConceptContainer");
    /*package*/ static final SConcept RobotConcept$rd = MetaAdapterFactory.getConcept(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b108L, "ProjectionalQiChat.structure.RobotConcept");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink concept$oC45 = MetaAdapterFactory.getReferenceLink(0x9f283760f9ca4f5bL, 0x8990d42851344ce7L, 0x6fd223061c49b31aL, 0x4d41c767d8337be0L, "concept");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
